schema {
  query: Query
  mutation: Mutation
}

scalar Date

type doubleHump {
  humpOne: String
  humpTwo: String
}

type OddType {
  date: Date
  camel: doubleHump
}

# This is a type to test comments
type CommentTest {
  "This is a single-line comment"
  singleLine: String
  """
  This is a
  multi-line
  comment.
  """
  multiLine: String
  enumCommentTest: EnumCommentTestCase
}

enum EnumCommentTestCase {
  "This is a single-line comment"
  first
  """
  This is a
  multi-line
  comment.
  """
  second
}

interface InterfaceTestCase {
  prop: String!
}

type ImplA implements InterfaceTestCase {
  prop: String!
  propA: String!
}

type ImplB implements InterfaceTestCase {
  prop: String!
  propB: Int
}

type PartialA {
  prop: String!
}

type PartialB {
  prop: String!
}

type Nesting {
  propA: [[EnumCommentTestCase!]!]!
  propB: [[EnumCommentTestCase]]
}

input Duplicate {
  propA: EnumCommentTestCase!
  propB: [EnumCommentTestCase!]!
}

union UnionTestCase = PartialA | PartialB

enum ManProps {
  first
  second
}

enum WomanProps {
  third
  fourth
}

type Man {
  manProp: ManProps
}

type Woman {
  womanProp: WomanProps
}

union Human = Man | Woman

type Query {
  misc: OddType
  commentTest: CommentTest
  interfaceTest: InterfaceTestCase
  unionTest: UnionTestCase
  scalarTest: Boolean!
  nesting: Nesting!
  man: Man!
}

type Mutation {
  duplicates(a: EnumCommentTestCase!, b: EnumCommentTestCase!, c: Duplicate!): Nesting!
}
